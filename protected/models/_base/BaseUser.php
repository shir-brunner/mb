<?php

/**
 * This is the model base class for the table "User".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "User" available as properties of the model,
 * followed by relations of table "User" available as properties of the model.
 *
 * @property integer $user_id
 * @property string $user_first_name
 * @property string $user_last_name
 * @property string $user_email
 * @property string $user_password_hash
 * @property string $user_create_time
 * @property string $user_settings
 * @property integer $user_deleted
 *
 * @property AuthItem[] $authItems
 * @property LoginToken[] $loginTokens
 * @property Request[] $requests
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className = __CLASS__)
	{
		return parent::model($className);
	}

	public function tableName()
	{
		return 'user';
	}

	public static function label($n = 1)
	{
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'user_first_name';
	}

	public function rules()
	{
		return array(
			array('user_first_name, user_last_name, user_email, user_password_hash, user_create_time', 'required'),
			array('user_deleted', 'numerical', 'integerOnly'=>true),
			array('user_first_name, user_last_name', 'length', 'max'=>45),
			array('user_email', 'length', 'max'=>200),
			array('user_password_hash', 'length', 'max'=>500),
			array('user_settings', 'safe'),
			array('user_settings, user_deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('user_id, user_first_name, user_last_name, user_email, user_password_hash, user_create_time, user_settings, user_deleted', 'safe', 'on' => 'search'),
		);
	}

	public function relations()
	{
		return array(
			'authItems' => array(self::MANY_MANY, 'AuthItem', 'auth_assignment(userid, itemname)'),
			'loginTokens' => array(self::HAS_MANY, 'LoginToken', 'user_id'),
			'requests' => array(self::HAS_MANY, 'Request', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
			'authItems' => 'AuthAssignment',
		);
	}

	public function attributeLabels()
	{
		return array(
			'user_id' => Yii::t('app', ''),
			'user_first_name' => Yii::t('app', 'First Name'),
			'user_last_name' => Yii::t('app', 'Last Name'),
			'user_email' => Yii::t('app', 'Email'),
			'user_password_hash' => Yii::t('app', 'Password Hash'),
			'user_create_time' => Yii::t('app', 'Create Time'),
			'user_settings' => Yii::t('app', 'Settings'),
			'user_deleted' => Yii::t('app', 'Deleted'),
			'authItems' => null,
			'loginTokens' => null,
			'requests' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('user_first_name', $this->user_first_name, true);
		$criteria->compare('user_last_name', $this->user_last_name, true);
		$criteria->compare('user_email', $this->user_email, true);
		$criteria->compare('user_password_hash', $this->user_password_hash, true);
		$criteria->compare('user_create_time', $this->user_create_time, true);
		$criteria->compare('user_settings', $this->user_settings, true);
		$criteria->compare('user_deleted', $this->user_deleted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	public function delete()
	{
		return $this->saveAttributes(array('user_deleted' => 1));
	}

	public function undoDelete()
	{
		return $this->saveAttributes(array('user_deleted' => 0));
	}

	public function defaultScope()
	{
		$alias = $this->getTableAlias(true, false);

		return array('condition' => "$alias.user_deleted = 0");
	}
	protected function beforeValidate()
	{
		if($this->isNewRecord && empty($this->user_create_time))
		{
			$this->setAttribute('user_create_time', date('Y-m-d H:i:s'));
		}

		return parent::beforeValidate();
	}
}