<?php

/**
 * This is the model base class for the table "request".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Request".
 *
 * Columns in table "request" available as properties of the model,
 * followed by relations of table "request" available as properties of the model.
 *
 * @property integer $request_id
 * @property string $request_hash
 * @property integer $product_id
 * @property integer $user_id
 * @property integer $request_status_id
 * @property string $request_paypal_payment_id
 * @property string $request_extra_info
 * @property string $request_fields
 * @property string $request_document_html
 * @property string $request_create_time
 * @property integer $request_deleted
 *
 * @property Product $product
 * @property RequestStatus $requestStatus
 * @property User $user
 */
abstract class BaseRequest extends GxActiveRecord {

	public static function model($className = __CLASS__)
	{
		return parent::model($className);
	}

	public function tableName()
	{
		return 'request';
	}

	public static function label($n = 1)
	{
		return Yii::t('app', 'Request|Requests', $n);
	}

	public static function representingColumn() {
		return 'request_hash';
	}

	public function rules()
	{
		return array(
			array('request_hash, product_id, request_status_id, request_create_time', 'required'),
			array('product_id, user_id, request_status_id, request_deleted', 'numerical', 'integerOnly'=>true),
			array('request_hash', 'length', 'max'=>300),
			array('request_paypal_payment_id', 'length', 'max'=>700),
			array('request_extra_info, request_fields, request_document_html', 'safe'),
			array('user_id, request_paypal_payment_id, request_extra_info, request_fields, request_document_html, request_deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('request_id, request_hash, product_id, user_id, request_status_id, request_paypal_payment_id, request_extra_info, request_fields, request_document_html, request_create_time, request_deleted', 'safe', 'on' => 'search'),
		);
	}

	public function relations()
	{
		return array(
			'product' => array(self::BELONGS_TO, 'Product', 'product_id'),
			'requestStatus' => array(self::BELONGS_TO, 'RequestStatus', 'request_status_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels()
	{
		return array(
			'request_id' => Yii::t('app', ''),
			'request_hash' => Yii::t('app', 'Hash'),
			'product_id' => null,
			'user_id' => null,
			'request_status_id' => null,
			'request_paypal_payment_id' => Yii::t('app', 'Paypal Payment'),
			'request_extra_info' => Yii::t('app', 'Extra Info'),
			'request_fields' => Yii::t('app', 'Fields'),
			'request_document_html' => Yii::t('app', 'Document Html'),
			'request_create_time' => Yii::t('app', 'Create Time'),
			'request_deleted' => Yii::t('app', 'Deleted'),
			'product' => null,
			'requestStatus' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('request_id', $this->request_id);
		$criteria->compare('request_hash', $this->request_hash, true);
		$criteria->compare('t.product_id', $this->product_id);
		$criteria->compare('t.user_id', $this->user_id);
		$criteria->compare('t.request_status_id', $this->request_status_id);
		$criteria->compare('request_paypal_payment_id', $this->request_paypal_payment_id, true);
		$criteria->compare('request_extra_info', $this->request_extra_info, true);
		$criteria->compare('request_fields', $this->request_fields, true);
		$criteria->compare('request_document_html', $this->request_document_html, true);
		$criteria->compare('request_create_time', $this->request_create_time, true);
		$criteria->compare('request_deleted', $this->request_deleted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	public function delete()
	{
		return $this->saveAttributes(array('request_deleted' => 1));
	}

	public function undoDelete()
	{
		return $this->saveAttributes(array('request_deleted' => 0));
	}

	public function defaultScope()
	{
		$alias = $this->getTableAlias(true, false);

		return array('condition' => "$alias.request_deleted = 0");
	}
	protected function beforeValidate()
	{
		if($this->isNewRecord && empty($this->request_create_time))
		{
			$this->setAttribute('request_create_time', date('Y-m-d H:i:s'));
		}

		return parent::beforeValidate();
	}
}